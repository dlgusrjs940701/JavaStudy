    
오늘의 목표는 1번부터 7번까지 입니다.
drop table users;
drop table carinfo;

create table users(
id varchar2(8), 
name varchar2(10), 
addr varchar2(10));

create table carinfo(
c_num varchar2(4),   --자동차 번호
c_name varchar2(10),  -- 자동차 종류
 id varchar2(8));

insert into users values ('1111','kim','수원');
insert into users values ('2222','lee','서울');
insert into users values ('3333','park','대전');
insert into users values ('4444','choi','대전');

insert into carinfo values ('1234','중형','1111');
insert into carinfo values ('3344','소형','1111');
insert into carinfo values ('5566','중형','3333');
insert into carinfo values ('6677','중형','3333');
insert into carinfo values ('7788','중형','4444');
insert into carinfo values ('8888','중형','5555');


위 자료를 회원이 등록한 자동차 정보이다.
1. 회원의 이름과 주소를 출력하시오.
select name 이름, addr 주소
from users;

2. 회원의 이름과 소유한 자동차 번호를 출력하시오.
select a.name 이름, b.c_num 차번호
from users a, carinfo b
where a.id = b.id;

3. 자동차 번호가 7788인 소유자의 이름과 주소를 출력하시오.
select a.name 이름, a.addr 주소 
from users a, carinfo b
where a.id = b.id and b.c_num = '7788';

select a.name 이름, a.addr 주소
from users a
inner join carinfo b
on a.id = b.id
where b.c_num = '7788';

4. 자동차를 소유하지 않은 사람의 이름과 주소를 출력하시오.
select a.name 이름, a.addr 주소
from users a
left outer join carinfo b
on a.id=b.id
where b.id is null;

left outer join 혹은 right outer join 은 (+) 로 대체 가능

5. 회원수별 등록한 자동차 수를 출력하시오.
select a.name 이름, count(*) 보유갯수
from users a
inner join carinfo b
on a.id=b.id 
group by (a.id, a.name);

6. 2대 이상을 소유한 회원의 이름과 소유한 자동차 수를 출력하시오.
select a.name 이름, count(*) 보유갯수
from users a
inner join carinfo b
on a.id=b.id 
group by (a.id, a.name)
having count(*) >= 2;

7. 자동차는 등록되어 있는데 소유자가 없는 자동차 번호를 출력하시오.
select b.c_num 자동차번호
from users a
right outer join carinfo b
on a.id = b.id
where a.name is null;



-- 다음 부터는 3개 테이블을 조인하는 문제입니다.

-- companycar 회사에서 구매한 자동차를 의미, 
carinfo는 직원에게 배정한 자동차

다음 테이블을 생성하시오.
create table companycar(     -- 자동차 정보
c_num varchar2(4),   -- 차번호
c_com varchar2(30), 
c_name varchar2(10),  -- 차이름
c_price number);  -- 차 가격

다음 튜플을 삽입하세요
insert into companycar values ('1234','현다','소나타',1000);
insert into companycar values ('3344','기와','축제',2000);
insert into companycar values ('7788','기와','레2',800);
insert into companycar values ('9900','현다','그랭저',2100);

8. 배정된 자동차의 차번호, 제조사, 자동차명, 가격을 출력하시오.
select a.c_num 차번호, b.c_com 제조사, b.c_name 자동차명, b.c_price 가격
from carinfo a
inner join companycar b
on a.c_num = b.c_num;

9. 회사에서구매는 하였지만 배정되지 않은 자동차의 차번호, 제조자, 자동차 이름을 출력   
select b.c_num 차번호, b.c_com 제조사, b.c_name 자동차명
from carinfo a
right outer join companycar b
on a.c_num=b.c_num
where a.c_num is null;

10. 자동차 가격이 1000만원 이상인 자동차의 자동차 번호를 출력하시오.
select c_num 차번호, c_price||'만원' 가격
from companycar
where c_price >= 1000
order by c_price;

11. 배정된 자동차 중에 회사에서 구매한 자동차가 아닌 자동차 번호를 출력하시오.
select a.c_num 차번호
from carinfo a
left outer join companycar b
on a.c_num = b.c_num
where b.c_num is null;

12. 모든 사람의 정보를 출력하시오. 이름, 배정받은 자동차번호, 자동차이름
select a.name 이름, nvl(b.c_num, '없음') 차번호, nvl(c.c_name, '없음') 자동차이름
from users a, carinfo b, companycar c
where a.id = b.id
and b.c_num = c.c_num
order by b.c_num;

또는 소유주가 등록은 되어있으나 차번호가 없거나, 차번호까진 등록되어 있는데 차이름을 등록 안한 경우

select a.name 이름, nvl(b.c_num, '없음') 차번호, nvl(c.c_name, '없음') 자동차이름
from users a
left outer join carinfo b
on a.id = b.id
left outer join companycar c
on b.c_num = c.c_num
order by a.name;

12번의 서비스를 제공하기 위해 view를 만들어보자
create view all_users as (
select a.name 이름, nvl(b.c_num, '없음') 차번호, nvl(c.c_name, '없음') 자동차이름
from users a
left outer join carinfo b
on a.id = b.id
left outer join companycar c
on b.c_num = c.c_num
order by a.name);


테이블은 데이터 중복을 최소화 하기 위해 정규화 되어야 하고, 정규화는 테이블을 분리하는 의미가 있다.
그런데, 서비스를 이용하는 고객입장에서는 2개 이상의 테이블이 조인이 되어야 하는 경우가 있다.
그래서 정규화는 설계자의 입장이고, 조인은 서비스를 제공하는 입장의 기술이다.
그런데, 2개 이상의 테이블이 조인되어야 하는 서비스는 서비스가 이용될때마다 db는 조인 연산을 계속해야 한다,
쿼리도 복잡하다. 간단하게 할 방법은 없을까?
해결책은 물리적인 테이블은 유지하되, 조인 결과를 합친 논이적인 테이블을 만드는 것이다. 논리적인 테이블은 물리적인 테이블의 데이터로 만들어져 있다. 
이런 논리적인 테이블을 뷰라고 한다.

----------------------------

뷰를 통해서 인서트, 델리트, 업데이트가 이론적으로 가능하지만 테이블의 무결성제약조건에 위배가 되지 않아야한다.
이런점에서 뷰는 조회목적으로 많이 사용한다.
